<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>三维GIS备忘录</title>
      <link href="/2023/08/02/san-wei-gis-bei-wang-lu/"/>
      <url>/2023/08/02/san-wei-gis-bei-wang-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="球体"><a href="#球体" class="headerlink" title="球体"></a>球体</h2><p>球体为人为定义的一组三维向量描述准备绘制球体的三个轴向的半径长度;</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 经纬度椭球体</span><span class="token keyword">const</span> WGS84Ellipsoid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ellipsoid</span><span class="token punctuation">(</span><span class="token number">6378137.0</span><span class="token punctuation">,</span> <span class="token number">6378137.0</span><span class="token punctuation">,</span> <span class="token number">6356752.3142451793</span><span class="token punctuation">)</span><span class="token comment">// 经纬度圆球</span><span class="token keyword">const</span> <span class="token constant">WGS84SPHERE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ellipsoid</span><span class="token punctuation">(</span><span class="token number">6378137.0</span><span class="token punctuation">,</span> <span class="token number">6378137.0</span><span class="token punctuation">,</span> <span class="token number">6378137.0</span><span class="token punctuation">)</span><span class="token comment">// 月球</span><span class="token keyword">const</span> <span class="token constant">MOON</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ellipsoid</span><span class="token punctuation">(</span><span class="token number">1737400.0</span><span class="token punctuation">,</span> <span class="token number">1737400.0</span><span class="token punctuation">,</span> <span class="token number">1737400.0</span><span class="token punctuation">)</span></code></pre><h2 id="地理矩形"><a href="#地理矩形" class="headerlink" title="地理矩形"></a>地理矩形</h2><p>由经纬度组成的二维矩形框,最大值为 [-180,-90,180,90]</p><h2 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h2><h3 id="经纬度投影-EPSG-4326"><a href="#经纬度投影-EPSG-4326" class="headerlink" title="经纬度投影(EPSG:4326)"></a>经纬度投影(EPSG:4326)</h3><p>经纬度坐标(弧度)投影到地图坐标(米),X和Y分别为经度和纬度，乘以<a href="#%E7%90%83%E4%BD%93">球体</a>的半径<br>Z为高度</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cartographic</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> semimajorAxis <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_semimajorAxis<span class="token punctuation">;</span>  <span class="token keyword">const</span> x <span class="token operator">=</span> cartographic<span class="token punctuation">.</span>longitude <span class="token operator">*</span> semimajorAxis<span class="token punctuation">;</span>  <span class="token keyword">const</span> y <span class="token operator">=</span> cartographic<span class="token punctuation">.</span>latitude <span class="token operator">*</span> semimajorAxis<span class="token punctuation">;</span>  <span class="token keyword">const</span> z <span class="token operator">=</span> cartographic<span class="token punctuation">.</span>height<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cartesian3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  result<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  result<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  result<span class="token punctuation">.</span>z <span class="token operator">=</span> z<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="墨卡托投影-EPSG-3857"><a href="#墨卡托投影-EPSG-3857" class="headerlink" title="墨卡托投影(EPSG:3857)"></a>墨卡托投影(EPSG:3857)</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Converts a geodetic latitude in radians, in the range -PI/2 to PI/2, to a Mercator * angle in the range -PI to PI. * @param &#123;number&#125; latitude The geodetic latitude in radians. * @returns &#123;number&#125; The Mercator angle. */</span>WebMercatorProjection<span class="token punctuation">.</span><span class="token function-variable function">geodeticLatitudeToMercatorAngle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">latitude</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Clamp the latitude coordinate to the valid Mercator bounds.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>latitude <span class="token operator">></span> WebMercatorProjection<span class="token punctuation">.</span>MaximumLatitude<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    latitude <span class="token operator">=</span> WebMercatorProjection<span class="token punctuation">.</span>MaximumLatitude<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>latitude <span class="token operator">&lt;</span> <span class="token operator">-</span>WebMercatorProjection<span class="token punctuation">.</span>MaximumLatitude<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    latitude <span class="token operator">=</span> <span class="token operator">-</span>WebMercatorProjection<span class="token punctuation">.</span>MaximumLatitude<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> sinLatitude <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>latitude<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0.5</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> sinLatitude<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> sinLatitude<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * Converts geodetic ellipsoid coordinates, in radians, to the equivalent Web Mercator * X, Y, Z coordinates expressed in meters and returned in a &#123;@link Cartesian3&#125;.  The height * is copied unmodified to the Z coordinate. * * @param &#123;Cartographic&#125; cartographic The cartographic coordinates in radians. * @param &#123;Cartesian3&#125; [result] The instance to which to copy the result, or undefined if a *        new instance should be created. * @returns &#123;Cartesian3&#125; The equivalent web mercator X, Y, Z coordinates, in meters. */</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cartographic<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> semimajorAxis <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_semimajorAxis<span class="token punctuation">;</span>  <span class="token keyword">const</span> x <span class="token operator">=</span> cartographic<span class="token punctuation">.</span>longitude <span class="token operator">*</span> semimajorAxis<span class="token punctuation">;</span>  <span class="token keyword">const</span> y <span class="token operator">=</span>    WebMercatorProjection<span class="token punctuation">.</span><span class="token function">geodeticLatitudeToMercatorAngle</span><span class="token punctuation">(</span>      cartographic<span class="token punctuation">.</span>latitude    <span class="token punctuation">)</span> <span class="token operator">*</span> semimajorAxis<span class="token punctuation">;</span>  <span class="token keyword">const</span> z <span class="token operator">=</span> cartographic<span class="token punctuation">.</span>height<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cartesian3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  result<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  result<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  result<span class="token punctuation">.</span>z <span class="token operator">=</span> z<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="切片规则-TilingScheme"><a href="#切片规则-TilingScheme" class="headerlink" title="切片规则(TilingScheme)"></a>切片规则(TilingScheme)</h2><p>在地球表面上的几何形状或是图像的平铺方案。<br>规定零层的大小,然后按照零层配置的大小遍历后续的级别。</p><p>一般情况下可以细分为:</p><h3 id="地理切片规则"><a href="#地理切片规则" class="headerlink" title="地理切片规则"></a>地理切片规则</h3><p>经纬度直接映射到X&#x2F;Y,默认情况下 <strong>X</strong>方向 为<strong>2</strong>个瓦片,<strong>Y</strong>方向 <strong>1</strong> 个瓦片,及将球面看做一个<a href="#%E5%9C%B0%E7%90%86%E7%9F%A9%E5%BD%A2">地理矩形</a><br>切割成两个正方形;<br>层级和个数的公式为:X方向的个数为为 2 &lt;&lt; Level Y方向为1 &lt;&lt; Level</p><h3 id="墨卡托切片规则"><a href="#墨卡托切片规则" class="headerlink" title="墨卡托切片规则"></a>墨卡托切片规则</h3><p>墨卡托投影将地球看作一个正方形及X方向和Y方向默认情况下都只有一个瓦片;</p><h2 id="金字塔瓦片"><a href="#金字塔瓦片" class="headerlink" title="金字塔瓦片"></a>金字塔瓦片</h2><ul><li>根据切片规则生成零层的瓦片集;</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">QuadtreeTile<span class="token punctuation">.</span><span class="token function-variable function">createLevelZeroTiles</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tilingScheme</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//>>includeStart('debug', pragmas.debug);</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>tilingScheme<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DeveloperError</span><span class="token punctuation">(</span><span class="token string">"tilingScheme is required."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//>>includeEnd('debug');</span>  <span class="token keyword">const</span> numberOfLevelZeroTilesX <span class="token operator">=</span> tilingScheme<span class="token punctuation">.</span><span class="token function">getNumberOfXTilesAtLevel</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> numberOfLevelZeroTilesY <span class="token operator">=</span> tilingScheme<span class="token punctuation">.</span><span class="token function">getNumberOfYTilesAtLevel</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>numberOfLevelZeroTilesX <span class="token operator">*</span> numberOfLevelZeroTilesY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> numberOfLevelZeroTilesY<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> numberOfLevelZeroTilesX<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuadtreeTile</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        tilingScheme<span class="token operator">:</span> tilingScheme<span class="token punctuation">,</span>        x<span class="token operator">:</span> x<span class="token punctuation">,</span>        y<span class="token operator">:</span> y<span class="token punctuation">,</span>        level<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://cesium.com/blog/2015/04/07/quadtree-cheatseet/">quadtree-cheatseet</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-ThreeJS插件制作教程</title>
      <link href="/2023/07/11/hexo-threejs-cha-jian-zhi-zuo-jiao-cheng/"/>
      <url>/2023/07/11/hexo-threejs-cha-jian-zhi-zuo-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Hexo 有强大的<a href="https://hexo.io/zh-cn/docs/plugins.html">插件系统</a>使您能轻松扩展功能而不用修改核心模块的源码。在 Hexo 中有两种形式的插件：</p></blockquote><ul><li>脚本（Scripts）<br>如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 scripts 文件夹，在启动时就会自动载入。</li><li>插件（Packages）<br>如果您的代码较复杂，或是您想要发布到 NPM 上，建议您编写插件。首先，在 node_modules 文件夹中建立文件夹，文件夹名称开头必须为 hexo-，如此一来 Hexo 才会在启动时载入；否则 Hexo 将会忽略它。<br>文件夹内至少要包含 2 个文件：一个是主程序，另一个是 package.json，描述插件的用途和所依赖的插件。</li></ul><h2 id="最小示例"><a href="#最小示例" class="headerlink" title="最小示例"></a>最小示例</h2><ul><li>在根目录新建一个scripts文件夹,并注册开始生成的回调函数</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>tag<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"threejs"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"threejs 插件加载完成!"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">threeTemplate</span><span class="token punctuation">(</span><span class="token function">processArgs</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="制作Threejs插件"><a href="#制作Threejs插件" class="headerlink" title="制作Threejs插件"></a>制作Threejs插件</h2><ul><li>在上一步的基础上,参考此教程初始化Threejs</li><li>index.js上添加ThreeJS的初始化内容</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">threeTemplate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> code <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;div style="margin:0 auto; width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>width<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px">        &lt;canvas data-engine="three.js r149" id="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">">&lt;/canvas>    &lt;/div>    &lt;script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js">&lt;/script>    &lt;script type="importmap">        &#123;            "imports": &#123;                "three": "https://unpkg.com/three@latest/build/three.module.js",                "three/addons/": "https://unpkg.com/three@latest/examples/jsm/"            &#125;        &#125;    &lt;/script>    &lt;script type="module">        import * as THREE from 'three';        import &#123; OrbitControls &#125; from 'three/addons/controls/OrbitControls.js';        let camera, scene, renderer, object, stats;        function init(id, width, height) &#123;            //初始化场景            scene = new THREE.Scene();            //初始化相机            camera = new THREE.PerspectiveCamera(36, width / height, 1, 100);            camera.position.set(8, 8, 8);            //初始化环境光            scene.add(new THREE.AmbientLight(0xffffff, 0.5));            //初始化方向光            const dirLight = new THREE.DirectionalLight(0xffffff, 1);            dirLight.position.set(5, 10, 7.5);            dirLight.castShadow = true;            dirLight.shadow.camera.right = 2;            dirLight.shadow.camera.left = - 2;            dirLight.shadow.camera.top = 2;            dirLight.shadow.camera.bottom = - 2;            dirLight.shadow.mapSize.width = 1024;            dirLight.shadow.mapSize.height = 1024;            scene.add(dirLight);            //初始化渲染器            renderer = new THREE.WebGLRenderer(&#123;                antialias: true,                canvas: document.getElementById(id)            &#125;);            renderer.setPixelRatio(window.devicePixelRatio);            renderer.setSize(width, height);            renderer.setClearColor(0x263238);            window.addEventListener('resize', onWindowResize);            renderer.localClippingEnabled = false;            function onWindowResize() &#123;                camera.aspect = width / height;                camera.updateProjectionMatrix();                renderer.setSize(width, height);            &#125;            const controls = new OrbitControls(camera, renderer.domElement);            controls.minDistance = 2;            controls.maxDistance = 20;            controls.update();        &#125;        function animate() &#123;            requestAnimationFrame(animate);            renderer.render(scene, camera);        &#125;        init('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">', </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>width<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>height<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)        animate()        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">    &lt;/script>            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></code></pre><h2 id="展示效果如下"><a href="#展示效果如下" class="headerlink" title="展示效果如下"></a>展示效果如下</h2><pre class="language-text" data-language="text"><code class="language-text">&#123;% threejs 400 300 "scene.add(new THREE.Mesh(new THREE.BoxGeometry(2, 2, 2), new THREE.MeshLambertMaterial(&#123;  color: 0xffff00, &#125;)))"%&#125;</code></pre>    <div style="margin:0 auto; width: 400px">        <canvas data-engine="three.js r149" id="threejs5377"></canvas>    </div>    <script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>    <script type="importmap">        {            "imports": {                "three": "https://unpkg.com/three@latest/build/three.module.js",                "three/addons/": "https://unpkg.com/three@latest/examples/jsm/"            }        }    </script>    <script type="module">        import * as THREE from 'three';        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';        let camera, scene, renderer, object, stats;        function init(id, width, height) {            //初始化场景            scene = new THREE.Scene();            //初始化相机            camera = new THREE.PerspectiveCamera(36, width / height, 1, 100);            camera.position.set(8, 8, 8);            //初始化环境光            scene.add(new THREE.AmbientLight(0xffffff, 0.5));            //初始化方向光            const dirLight = new THREE.DirectionalLight(0xffffff, 1);            dirLight.position.set(5, 10, 7.5);            dirLight.castShadow = true;            dirLight.shadow.camera.right = 2;            dirLight.shadow.camera.left = - 2;            dirLight.shadow.camera.top = 2;            dirLight.shadow.camera.bottom = - 2;            dirLight.shadow.mapSize.width = 1024;            dirLight.shadow.mapSize.height = 1024;            scene.add(dirLight);            //初始化渲染器            renderer = new THREE.WebGLRenderer({                antialias: true,                canvas: document.getElementById(id)            });            renderer.setPixelRatio(window.devicePixelRatio);            renderer.setSize(width, height);            renderer.setClearColor(0x263238);            window.addEventListener('resize', onWindowResize);            renderer.localClippingEnabled = false;            function onWindowResize() {                camera.aspect = width / height;                camera.updateProjectionMatrix();                renderer.setSize(width, height);            }            const controls = new OrbitControls(camera, renderer.domElement);            controls.minDistance = 2;            controls.maxDistance = 20;            controls.update();        }        function animate() {            requestAnimationFrame(animate);            renderer.render(scene, camera);        }        init('threejs5377', 400, 300)        animate()        scene.add(new THREE.Mesh(new THREE.BoxGeometry(2, 2, 2), new THREE.MeshLambertMaterial({  color: 0xffff00, })))    </script>            <h1 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h1><ul><li>Hexo 代码高亮插件的Bug <a href="https://github.com/ele828/hexo-prism-plugin/issues/61">花括号显示为字符串‘&amp;#123;’和‘&amp;#125’ · Issue #61</a></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p><a href="https://hexo.io/zh-cn/docs/plugins.html">插件 | Hexo</a></p></li><li><p><a href="https://github.com/D-Sketon/hexo-minecraft-skin-viewer">我的世界皮肤预览插件 | Hexo</a></p></li><li><p><a href="https://threejs.org/docs/index.html#manual/zh/introduction/Installation">Threejs初始化教程 | Threejs</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Threejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Threejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
